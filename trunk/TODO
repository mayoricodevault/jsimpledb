
- Add support for composite indexes on 3, 4, ... fields

- Add support for XA transactions
    - But only if KVStore supports them

- Annotation enhancements:
    - Allow storageId's to default to zero; if so, auto-generate them:
        - Object type: hash object type name
        - Complex field: hash field name+field type (i.e., "list", "set", or "map")
        - Simple field: hash field name+field type
            - For sub-fields, name is "parent.element", "parent.key", or "parent.value"
        - Hash to a value in the range 0xfb-0x100fa (so max 3 bytes encoded)
    - @JSimpleClass: add autoProperties() default true
        - All bean properties not marked @JTransient are added automatically
    - @JSimpleClass: add abstract() default false
        - If true then no corresponding object type is generated
        - Alows autoProperties to work for subtypes without creating supertype

- Build and distribute binary distribution
    - lib subdirectory with dependencies
    - add Main-Class and Classpath manifest headers to CLI and GUI jars
    - Example database and commands to run CLI and GUI
    - README's etc.

- Expression parsing
    - Aggregate functions: min(), max(), avg(), sum()

- Schema comparator
    - Shows only differences
    - New CLI command "schema-diff vers1 vers2"

- FieldType UUID's
    - Add "encoding UUID" to FieldType
    - Record UUID in database schema
    - Verify on load

- Add new @JField property: boolean cascadeDelete()

- Add @JField uniqueness constraints:
    - Field must be indexed (obviously)
    - boolean unique() default false
    - boolean uniqueDefault() default false
        - whether default value included
        - default value is NaN for float, double; otherwise normal default
    - boolean uniqueGlobally() default true
        - for simple fields: must be true, error otherwise
        - for collection sub-fields: whether constraint is per-object, or global
    - Verify in deferred manner as follows:
        - Add validation check for uniqueness
        - Register SimpleFieldChangeListener on affected fields
        - When listener invoked (or object created), enqueue object for validation
    - Note adding unique() in schema upgrade can create unchecked violations
    - Note for set element or map key sub-field, if both uniqueDefault = false
      and uniqueGlobal = false this is redundant

- Finish Vaadin GUI editor generator
    - Implement collection fields
    - Make more modular/pluggable

- Ant task for easy validation of JLayer annotations during a build

- Reimplement LockManager using Guava ranges?
    - https://code.google.com/p/guava-libraries/wiki/RangesExplained

- Reimplement LockManager using KeyRanges?

- More built-in field types:
    - BigInteger, BigDecimal
    - SimpleDateFormat
    - BitSet
    - InetAddress, Inet4Address, Inet6Address
    - {Gregorian}Calendar?
    - {Simple}TimeZone?

- Graceful recovery mode
    - If any inconsistent information encountered
        - Log an error
        - Return reasonable default

- Consistency checker
    - Checks a JDB key-value store for consistency
        - All field values are properly encoded
        - Object vs. index entry consistency
        - No extraneous key-value pairs exist
    - Uses another, empty database to store its state
        - Allows to run in multiple "chunked" transactions
    - Generates inconsistency report
    - Can auto-repair if necessary

