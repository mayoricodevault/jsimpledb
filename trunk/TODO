
- Add support for XA transactions
    - But only if KVStore supports them

- BUG: JDB querying index on reference field type A in schema version X where objects
  in schema version Y exist and Y's version of reference field has a wider type B.
  Then the keySet() of the index map will have type A but contain elements of type B,
  resulting in runtime ClassCastExceptions.
    -> Fix: restrict index map keySet() to the expected types (subtypes of A)

- Annotation enhancements:
    - Allow storageId's to default to zero; if so, auto-generate them:
        - Object type: hash object type name
        - Complex field: hash field name+field type (i.e., "list", "set", or "map")
        - Simple field: hash field name+field type
            - For sub-fields, name is "parent.element", "parent.key", or "parent.value"
        - Hash to a value in the range 0xfb-0x100fa (so max 3 bytes encoded)
    - @JSimpleClass: add autoProperties() default true
        - All bean properties not marked @JTransient are added automatically
    - @JSimpleClass: add abstract() default false
        - If true then no corresponding object type is generated
        - Alows autoProperties to work for subtypes without creating supertype

- Allow @IndexQuery and JTransaction.queryIndex() to accept set element type
  that is wider than necessary (e.g., JObject instead of MyClass). This is
  needed when reading an index containing types dropped from current schema.
  We should already accept set element types that are narrower (e.g., MySubClass).

- Build and distribute binary distribution
    - lib subdirectory with dependencies
    - add Main-Class and Classpath manifest headers to CLI and GUI jars
    - Example database and commands to run CLI and GUI
    - README's etc.

- Expression parsing
    - Aggregate functions: min(), max(), avg(), sum()

- Schema comparator
    - Shows only differences
    - New CLI command "schema-diff vers1 vers2"

- FieldType UUID's
    - Add "encoding UUID" to FieldType
    - Record UUID in database schema
    - Verify on load

- Add new @JField property: boolean cascadeDelete()

- Add @JField uniqueness constraints:
    - Field must be indexed (obviously)
    - boolean unique() default false
    - boolean uniqueDefault() default false
        - whether default value included
        - default value is NaN for float, double; otherwise normal default
    - boolean uniqueGlobally() default true
        - for simple fields: must be true, error otherwise
        - for collection sub-fields: whether constraint is per-object, or global
    - Verify in deferred manner as follows:
        - Add validation check for uniqueness
        - Register SimpleFieldChangeListener on affected fields
        - When listener invoked (or object created), enqueue object for validation
    - Note adding unique() in schema upgrade can create unchecked violations
    - Note for set element or map key sub-field, if both uniqueDefault = false
      and uniqueGlobal = false this is redundant

- Composite indexes on multiple fields
    - @JCompositeIndex(name = "foo", storageId = 123, fields = { 12, 23 })
        - Or: @JCompositeIndex(fieldNames = { "friend", "foe"})
    - public NavigableSet<?> queryIndex(int... storageId)
        - Or: public NavigableSet<?> queryIndex("foo")

- Add Vaadin GUI editor generator

- Ant task for easy validation of JLayer annotations during a build

- Reimplement LockManager using Guava ranges?
    - https://code.google.com/p/guava-libraries/wiki/RangesExplained

- More built-in field types:
    - BigInteger, BigDecimal
    - SimpleDateFormat
    - BitSet
    - InetAddress, Inet4Address, Inet6Address
    - {Gregorian}Calendar?
    - {Simple}TimeZone?

- Graceful recovery mode
    - If any inconsistent information encountered
        - Log an error
        - Return reasonable default

