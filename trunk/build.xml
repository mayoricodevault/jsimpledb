<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- $Id$ -->
<project name="jsimpledb" default="build"
  xmlns:dellroad="urn:org.dellroad.ant"
  xmlns:antcontrib="urn:net.sf.antcontrib"
  xmlns:artifact="antlib:org.apache.maven.artifact.ant"
  xmlns:ivy="urn:org.apache.ivy.ant">

    <!-- Configure build & stuff -->
    <property name="maven.group.id" value="org.jsimpledb"/>
    <property name="library.version" value="1.1.0-SNAPSHOT"/>
    <property name="javac.compiler.flags" value="-Xlint:all"/>
    <property name="coverage.report" value="true"/>

    <!-- Import generic build macros -->
    <import file="${basedir}/src/build/macros.xml"/>

    <!-- Determine SVN revision and version -->
    <dellroad:svnrevision property="svn.revision"/>
    <echo message=""/>
    <echo message="Version is ${library.version} (r${svn.revision})"/>
    <echo message=""/>

    <!-- Classpath targets -->
    <target name="build.classpath" unless="build.classpath.resolved">
        <dellroad:ivypath pathid="build.classpath" conf="build"/>
        <property name="build.classpath.resolved" value="true"/>
    </target>

    <target name="javac.classpath" unless="javac.classpath.resolved">
        <dellroad:ivypath pathid="javac.classpath" conf="javac"/>
        <property name="javac.classpath.resolved" value="true"/>
    </target>

    <target name="weaver.classpath" unless="weaver.classpath.resolved">
        <dellroad:ivypath pathid="weaver.classpath" conf="weaver"/>
        <property name="weaver.classpath.resolved" value="true"/>
    </target>

    <target name="aspects.classpath" unless="aspects.classpath.resolved">
        <dellroad:ivypath pathid="aspects.classpath" conf="aspects"/>
        <property name="aspects.classpath.resolved" value="true"/>
    </target>

    <target name="unittest.classpath" unless="unittest.classpath.resolved">
        <dellroad:ivypath pathid="unittest.classpath" conf="test"/>
        <property name="unittest.classpath.resolved" value="true"/>
    </target>

    <!-- Resources -->
    <target name="resources" unless="resources.completed" description="Gather resources">
        <delete dir="build/resources"/>
        <mkdir dir="build/resources"/>
        <copy todir="build/resources">
            <fileset dir="src/java" includes="**/*.xsd"/>
            <fileset dir="src/properties" includes="${ant.project.name}.properties"/>
            <filterset>
                <filter token="VERSION" value="${library.version}"/>
            </filterset>
        </copy>
        <property name="resources.completed" value="true"/>
    </target>

    <!-- AspectJ task definitions -->
    <target name="aop-setup" depends="weaver.classpath, aspects.classpath"
      unless="aop-setup.completed" description="Define AOP ant tasks and classpaths">

        <!-- Define ant task -->
        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
            <classpath refid="weaver.classpath"/>
        </taskdef>

        <!-- Define iajc.classpath: where to find classes that might be seen during iajc compile -->
        <path id="iajc.classpath">
            <path refid="javac.classpath"/>
        </path>

        <!-- Define aspect.classpath: where to find pre-compiled AOP aspects -->
        <path id="aspect.classpath">
            <path refid="javac.classpath"/>
        </path>

        <property name="aop-setup.completed" value="true"/>
    </target>

    <!-- Aspect compiling -->
    <target name="aspects" depends="javac, aop-setup" unless="aspects.completed" description="Compile AOP aspects">
        <antcontrib:outofdate>
            <sourcefiles>
                <fileset dir="." includes="build.xml"/>
                <fileset dir="src/java" includes="**/*.aj"/>
            </sourcefiles>
            <targetfiles path="build/aspects.timestamp"/>
            <sequential>
                <delete file="build/aspects.timestamp"/>
                <path id="aspects.classpath">
                    <path refid="iajc.classpath"/>
                    <pathelement location="build/classes"/>
                </path>
                <iajc srcdir="src/java"
                      destDir="build/classes"
                      classpathRef="aspects.classpath"
                      source="1.7"
                      target="1.7"
                      verbose="true"
                      showWeaveInfo="true"
                      failonerror="true">
                        <include name="**/*.aj"/>
                </iajc>
                <touch file="build/aspects.timestamp"/>
            </sequential>
        </antcontrib:outofdate>
        <property name="aspects.completed" value="true"/>
    </target>

    <!-- Aspect weaving -->
    <target name="weaving" depends="javac, aop-setup" unless="weaving.completed">
        <antcontrib:outofdate>
            <sourcefiles>
                <fileset dir="." includes="build.xml"/>
                <fileset dir="src/ivy" includes="ivy.xml"/>
                <fileset dir="src/java" includes="**/*.xml"/>
                <fileset dir="src/java" includes="**/*.java"/>
            </sourcefiles>
            <targetfiles path="build/weaving.timestamp"/>
            <sequential>
                <delete file="build/weaving.timestamp"/>
                <iajc inpath="build/classes"
                      destDir="build/classes"
                      classpathRef="iajc.classpath"
                      source="1.7"
                      target="1.7"
                      verbose="true"
                      showWeaveInfo="false"
                      failonerror="true"
                      aspectPathRef="aspect.classpath"/>
                <touch file="build/weaving.timestamp"/>
            </sequential>
        </antcontrib:outofdate>
        <property name="weaving.completed" value="true"/>
    </target>

    <!-- JARs -->
    <target name="jars" depends="javac, resources, weaving, build.classpath" unless="jar.completed"
      description="Build main JAR">
        <dellroad:ivyput pattern="build/[artifact].[ext]" conf="jarjars"/>
        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="build.classpath"/>
        <mkdir dir="build/dist"/>
        <delete file="build/dist/${ant.project.name}-${library.version}.jar"/>

        <!-- Core JAR -->
        <jarjar destfile="build/dist/${ant.project.name}-core-${library.version}.jar">
            <zipfileset src="build/asm.jar"/>
        <!-- for ClassGenerator debug
            <zipfileset src="build/asm-util.jar"/>
        -->
            <zipfileset src="build/dellroad-stuff.jar">
                <include name="**/*.class"/>
            </zipfileset>
            <rule pattern="org.objectweb.asm.**" result="org.jsimpledb.asm.@1"/>
            <rule pattern="org.dellroad.stuff.**" result="org.jsimpledb.drstuff.@1"/>
            <fileset dir="build/classes">
                <exclude name="org/jsimpledb/cli/**/*"/>
                <exclude name="org/jsimpledb/spring/**/*"/>
            </fileset>
            <fileset dir="build/resources">
                <exclude name="org/jsimpledb/cli/**/*"/>
                <exclude name="org/jsimpledb/spring/**/*"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${library.version}"/>
                <attribute name="SCM-Revision" value="${svn.revision}"/>
            </manifest>
            <keep pattern="org.jsimpledb.**"/>
        </jarjar>

        <!-- CLI JAR -->
        <jarjar destfile="build/dist/${ant.project.name}-cli-${library.version}.jar">
            <rule pattern="org.dellroad.stuff.**" result="org.jsimpledb.drstuff.@1"/>
            <fileset dir="build/classes">
                <include name="org/jsimpledb/cli/**/*"/>
            </fileset>
            <fileset dir="build/resources">
                <include name="org/jsimpledb/cli/**/*"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${library.version}"/>
                <attribute name="SCM-Revision" value="${svn.revision}"/>
            </manifest>
            <keep pattern="org.jsimpledb.**"/>
        </jarjar>

        <!-- Spring JAR -->
        <jar destfile="build/dist/${ant.project.name}-spring-${library.version}.jar">
            <fileset dir="build/classes">
                <include name="org/jsimpledb/spring/**/*"/>
            </fileset>
            <fileset dir="build/resources">
                <include name="org/jsimpledb/spring/**/*"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${library.version}"/>
                <attribute name="SCM-Revision" value="${svn.revision}"/>
            </manifest>
            <metainf dir="src/spring" includes="spring.*"/>
        </jar>

        <property name="jar.completed" value="true"/>
    </target>

    <!-- Build CLI deployment -->
    <target name="cli" description="Build CLI deployment" depends="jars" unless="cli.completed">
        <delete dir="build/cli"/>
        <mkdir dir="build/cli/libs"/>
        <dellroad:ivyput pattern="build/cli/libs/[module]-[artifact].[ext]" conf="cli"/>
        <copy tofile="build/cli/log4j.xml" file="src/xml/log4j-cli.xml"/>
        <copy file="build/dist/${ant.project.name}-core-${library.version}.jar" toDir="build/cli/libs"/>
        <copy file="build/dist/${ant.project.name}-cli-${library.version}.jar" toDir="build/cli/libs"/>
        <property name="cli.completed" value="true"/>
    </target>

    <!-- All distribution files -->
    <target name="otherjars" depends="javadoc" unless="otherjars.completed"
      description="Build source and Javadoc ZIPs">
        <mkdir dir="build/dist"/>
        <delete file="build/dist/${ant.project.name}-sources-${library.version}.jar"/>
        <jar destfile="build/dist/${ant.project.name}-sources-${library.version}.jar">
            <fileset dir="src/java" includes="**/*"/>
        </jar>
        <delete file="build/dist/${ant.project.name}-javadocs-${library.version}.jar"/>
        <jar destfile="build/dist/${ant.project.name}-javadocs-${library.version}.jar">
            <fileset dir="build/reports/javadoc" includes="**/*"/>
        </jar>
        <property name="otherjars.completed" value="true"/>
    </target>

    <!-- Build Javadocs -->
    <target name="javadoc" depends="javac" unless="javadoc.completed"
      description="Build API JavaDocs">
        <delete dir="build/javadoc"/>
        <mkdir dir="build/javadoc"/>
        <copy todir="build/javadoc">
            <fileset dir="src/java/org/jsimpledb" includes="overview.html"/>
            <filterset>
                <filter token="VERSION" value="${library.version}"/>
                <filter token="SVN_REVISION" value="${svn.revision}"/>
            </filterset>
        </copy>
        <dellroad:javadoc overview="build/javadoc/overview.html">
            <additional-classpath>
                <pathelement path="build/classes"/>
            </additional-classpath>
            <links>
                <link href="http://download.oracle.com/javase/7/docs/api/"/>
                <link href="http://download.oracle.com/javaee/7/api/"/>
                <link href="http://docs.guava-libraries.googlecode.com/git-history/v16.0/javadoc/"/>
                <link href="http://dellroad-stuff.googlecode.com/svn/trunk/publish/reports/javadoc/"/>
                <link href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/"/>
                <link href="https://foundationdb.com/documentation/javadoc/"/>
                <link href="http://www.slf4j.org/api/"/>
            </links>
        </dellroad:javadoc>
        <property name="javadoc.completed" value="true"/>
    </target>

    <!-- Checkstyle the source -->
    <target name="checkstyle" description="Run checkstyle report"
      depends="javac.classpath, unittest.classpath, checkstyle.classpath"
      unless="checkstyle.completed">
        <dellroad:checkstyle maxWarnings="0" maxErrors="0"/>
        <property name="checkstyle.completed" value="true"/>
    </target>

    <!-- Run unit tests -->
    <target name="tests" description="Run unit tests"
      depends="javac, resources, unittest.classpath, build.classpath, testng.classpath, cobertura.classpath"
      unless="tests.completed">
        <copy todir="build/test" overwrite="true">
            <fileset dir="src/test" includes="**/*.xsl"/>
            <fileset dir="src/test" includes="**/*.xml"/>
        </copy>
        <mkdir dir="build/test/META-INF"/>
        <copy todir="build/test/META-INF" overwrite="true">
            <fileset dir="src/spring" includes="spring.*"/>
        </copy>
        <copy file="src/xml/log4j-build.xml" tofile="build/test/log4j.xml"/>
        <dellroad:unit-tests cobertura="${coverage.report}">
            <addclasspath>
                <path refid="build.classpath"/>
                <path refid="javac.classpath"/>
            </addclasspath>
        </dellroad:unit-tests>
        <property name="tests.completed" value="true"/>
    </target>

    <!-- Publish reports -->
    <target name="publish" description="Publish build results" depends="reports">

        <!-- Remove exisiting stuff first -->
        <delete includeemptydirs="false">
            <fileset dir="publish">
                <include name="**/*"/>
            </fileset>
        </delete>

        <!-- Reports -->
        <mkdir dir="publish/reports"/>
        <copy todir="publish/reports">
            <fileset dir="build/reports">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- Maven macro -->
    <macrodef uri="urn:org.dellroad.ant" name="mavenpub">
        <attribute name="sign" default="true" description="Whether to sign with GPG"/>
        <attribute name="url" description="Repository URL"/>
        <attribute name="id" description="Repository ID"/>
        <sequential>

            <!-- Generate pom.xml -->
            <copy todir="build">
                <fileset dir="src/mvn" includes="pom.xml"/>
                <filterset>
                    <filter token="VERSION" value="${library.version}"/>
                    <filter token="GROUP_ID" value="${maven.group.id}"/>
                    <filter token="ARTIFACT_ID" value="${ant.project.name}"/>
                </filterset>
            </copy>

            <!-- Sign and deploy the JARs -->
            <antcontrib:for list="core,cli,spring,javadocs,sources" param="name" trim="true">
                <sequential>
                    <antcontrib:if>
                        <equals arg1="@{sign}" arg2="true"/>
                        <antcontrib:then>
                            <artifact:mvn>
                                <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
                                <arg value="-Durl=@{url}"/>
                                <arg value="-DrepositoryId=@{id}"/>
                                <arg value="-DpomFile=build/pom.xml"/>
                                <arg value="-Dfile=build/dist/${ant.project.name}-@{name}-${library.version}.jar"/>
                                <arg value="-Dclassifier=@{name}"/>
                                <arg value="-Pgpg"/>
                            </artifact:mvn>
                        </antcontrib:then>
                        <antcontrib:else>
                            <artifact:mvn>
                                <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file"/>
                                <arg value="-Durl=@{url}"/>
                                <arg value="-DrepositoryId=@{id}"/>
                                <arg value="-DpomFile=build/pom.xml"/>
                                <arg value="-Dfile=build/dist/${ant.project.name}-@{name}-${library.version}.jar"/>
                                <arg value="-Dclassifier=@{name}"/>
                            </artifact:mvn>
                        </antcontrib:else>
                    </antcontrib:if>
                </sequential>
            </antcontrib:for>
        </sequential>
    </macrodef>

    <!-- Publish snapshot to maven snapshot repository -->
    <target name="maven-snapshot" depends="jars, otherjars" description="Deploy JARs to Maven snapshot repository">

        <!-- Sanity check -->
        <fail message="can't put non-SNAPSHOT release ${library.version} into snapshot repository - do you need to update the version?">
            <condition>
                <not>
                    <contains string="${library.version}" substring="SNAPSHOT"/>
                </not>
            </condition>
        </fail>

        <!-- Define maven snapshots repository id and url -->
        <dellroad:mavenpub url="https://oss.sonatype.org/content/repositories/snapshots/" id="sonatype-nexus-snapshots" sign="false"/>
    </target>

    <!-- Publish release to maven staging repository -->
    <target name="maven-stage" depends="jars, otherjars" description="Deploy JARs to Maven staging repository">

        <!-- Sanity check -->
        <fail message="can't stage snapshot release ${library.version} - do you need to update the version?">
            <condition>
                <contains string="${library.version}" substring="SNAPSHOT" casesensitive="false"/>
            </condition>
        </fail>

        <!-- Define maven snapshots repository id and url -->
        <dellroad:mavenpub url="https://oss.sonatype.org/service/local/staging/deploy/maven2/" id="sonatype-nexus-staging" sign="true"/>
    </target>

    <!-- Reports target -->
    <target name="reports-project" depends="javadoc, checkstyle, tests"/>

    <!-- Release time stuff -->
    <target name="release" depends="clean, jars, reports, publish, maven-stage"
      description="Perform release-time tasks"/>

    <!-- Default target -->
    <target name="build" depends="clean, jars, reports"/>

</project>

